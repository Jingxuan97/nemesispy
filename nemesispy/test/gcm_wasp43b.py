#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
import numpy as np
import os
# Read in GCM data stored in gcm_wasp_43b.txt
nlon = 64
nlat = 32
npress = 53
gcm_lon_grid = np.array(
    [-177.19  , -171.56  , -165.94  , -160.31  , -154.69  , -149.06 ,
    -143.44  , -137.81  , -132.19  , -126.56  , -120.94  , -115.31  ,
    -109.69  , -104.06  ,  -98.438 ,  -92.812 ,  -87.188 ,  -81.562 ,
    -75.938 ,  -70.312 ,  -64.688 ,  -59.062 ,  -53.438 ,  -47.812 ,
    -42.188 ,  -36.562 ,  -30.938 ,  -25.312 ,  -19.688 ,  -14.062 ,
    -8.4375,   -2.8125,    2.8125,    8.4375,   14.062 ,   19.688 ,
    25.312 ,   30.938 ,   36.562 ,   42.188 ,   47.812 ,   53.438 ,
    59.062 ,   64.688 ,   70.312 ,   75.938 ,   81.562 ,   87.188 ,
    92.812 ,   98.438 ,  104.06  ,  109.69  ,  115.31  ,  120.94  ,
    126.56  ,  132.19  ,  137.81  ,  143.44  ,  149.06  ,  154.69  ,
    160.31  ,  165.94  ,  171.56  ,  177.19  ]
    )
gcm_lat_grid = np.array(
    [-87.188 , -81.562 , -75.938 , -70.312 , -64.688 , -59.062 ,
    -53.438 , -47.812 , -42.188 , -36.562 , -30.938 , -25.312 ,
    -19.688 , -14.062 ,  -8.4375,  -2.8125,   2.8125,   8.4375,
    14.062 ,  19.688 ,  25.312 ,  30.938 ,  36.562 ,  42.188 ,
    47.812 ,  53.438 ,  59.062 ,  64.688 ,  70.312 ,  75.938 ,
    81.562 ,  87.188 ]
    )
gcm_press_grid = np.array(
    [1.7064e+02, 1.2054e+02, 8.5152e+01, 6.0152e+01, 4.2492e+01,
    3.0017e+01, 2.1204e+01, 1.4979e+01, 1.0581e+01, 7.4747e+00,
    5.2802e+00, 3.7300e+00, 2.6349e+00, 1.8613e+00, 1.3148e+00,
    9.2882e-01, 6.5613e-01, 4.6350e-01, 3.2742e-01, 2.3129e-01,
    1.6339e-01, 1.1542e-01, 8.1532e-02, 5.7595e-02, 4.0686e-02,
    2.8741e-02, 2.0303e-02, 1.4342e-02, 1.0131e-02, 7.1569e-03,
    5.0557e-03, 3.5714e-03, 2.5229e-03, 1.7822e-03, 1.2589e-03,
    8.8933e-04, 6.2823e-04, 4.4379e-04, 3.1350e-04, 2.2146e-04,
    1.5644e-04, 1.1051e-04, 7.8066e-05, 5.5146e-05, 3.8956e-05,
    2.7519e-05, 1.9440e-05, 1.3732e-05, 9.7006e-06, 6.8526e-06,
    4.8408e-06, 3.4196e-06, 2.4156e-06])*1e5
iskip = 1+1+64+32+1+53

pvmap = np.zeros((nlon,nlat,npress))
for ilon in range(nlon):
    for ilat in range(nlat):
        pvmap[ilon,ilat,:] = gcm_press_grid

tmap = np.zeros((nlon,nlat,npress))
co2map_mean = np.zeros((nlon,nlat,npress))
h2map_mean = np.zeros((nlon,nlat,npress))
hemap_mean = np.zeros((nlon,nlat,npress))
ch4map_mean = np.zeros((nlon,nlat,npress))
comap_mean = np.zeros((nlon,nlat,npress))
h2omap_mean = np.zeros((nlon,nlat,npress))

__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))

f = open(os.path.join(__location__,'gcm_wasp43b.txt'))
gcm_data = f.read()
f.close()
gcm_data = gcm_data.split()
gcm_data = [float(i) for i in gcm_data]

for ilon in range(nlon):
    for ilat in range(nlat):
        for ipv in range(npress):
            tmap[ilon,ilat,ipv] = gcm_data[iskip]
            h2omap_mean[ilon,ilat,ipv] = gcm_data[iskip+6]
            co2map_mean[ilon,ilat,ipv] = gcm_data[iskip+1]
            comap_mean[ilon,ilat,ipv] = gcm_data[iskip+5]
            ch4map_mean[ilon,ilat,ipv] = gcm_data[iskip+4]
            hemap_mean[ilon,ilat,ipv] = gcm_data[iskip+3]
            h2map_mean[ilon,ilat,ipv] = gcm_data[iskip+2]
            iskip+=7

vmrmap_mean = np.zeros((nlon,nlat,npress,6))
for ilon in range(nlon):
    for ilat in range(nlat):
        for ipv in range(npress):
            vmrmap_mean[ilon,ilat,ipv,0] = h2omap_mean[ilon,ilat,ipv]
            vmrmap_mean[ilon,ilat,ipv,1] = co2map_mean[ilon,ilat,ipv]
            vmrmap_mean[ilon,ilat,ipv,2] = comap_mean[ilon,ilat,ipv]
            vmrmap_mean[ilon,ilat,ipv,3] = ch4map_mean[ilon,ilat,ipv]
            vmrmap_mean[ilon,ilat,ipv,4] = hemap_mean[ilon,ilat,ipv]
            vmrmap_mean[ilon,ilat,ipv,5] = h2map_mean[ilon,ilat,ipv]

# Simulated WASP43b phase curve using GCM data, Fig 12 Irwin 2020
# NPHASE x NWAVE
fortran_spectra = np.array([
    [1.25672e-04, 1.34992e-04, 1.95970e-04, 2.88426e-04, 3.37525e-04,
        2.81610e-04, 1.09969e-04, 7.62626e-05, 7.37120e-05, 8.76705e-05,
        1.14051e-04, 1.57063e-04, 2.17236e-04, 2.93693e-04, 3.60125e-04,
        1.91405e-03, 2.07116e-03],
    [1.49163e-04, 1.60559e-04, 2.21006e-04, 3.10688e-04, 3.60967e-04,
        3.11476e-04, 1.43551e-04, 1.09837e-04, 1.06979e-04, 1.22599e-04,
        1.51721e-04, 1.97449e-04, 2.59552e-04, 3.37193e-04, 4.04127e-04,
        2.13176e-03, 2.46649e-03],
    [1.85813e-04, 2.00869e-04, 2.60147e-04, 3.44923e-04, 3.96261e-04,
        3.56629e-04, 1.97996e-04, 1.65906e-04, 1.62971e-04, 1.80963e-04,
        2.13800e-04, 2.63000e-04, 3.27341e-04, 4.05451e-04, 4.71267e-04,
        2.44223e-03, 3.01733e-03],
    [2.29134e-04, 2.48922e-04, 3.06145e-04, 3.84130e-04, 4.36077e-04,
        4.08640e-04, 2.65755e-04, 2.37722e-04, 2.35328e-04, 2.56039e-04,
        2.92796e-04, 3.45179e-04, 4.11057e-04, 4.87958e-04, 5.50412e-04,
        2.80073e-03, 3.65343e-03],
    [2.67963e-04, 2.92363e-04, 3.46694e-04, 4.17297e-04, 4.69674e-04,
        4.54442e-04, 3.32080e-04, 3.10639e-04, 3.09756e-04, 3.33203e-04,
        3.73411e-04, 4.27761e-04, 4.93513e-04, 5.66249e-04, 6.22436e-04,
        3.14756e-03, 4.27115e-03],
    [2.89849e-04, 3.17008e-04, 3.68431e-04, 4.33839e-04, 4.86811e-04,
        4.79850e-04, 3.76501e-04, 3.62565e-04, 3.64057e-04, 3.89439e-04,
        4.31339e-04, 4.85190e-04, 5.48207e-04, 6.14174e-04, 6.63062e-04,
        3.39246e-03, 4.73849e-03],
    [2.88408e-04, 3.15467e-04, 3.65779e-04, 4.31420e-04, 4.85214e-04,
        4.78569e-04, 3.83556e-04, 3.74725e-04, 3.78473e-04, 4.04097e-04,
        4.44994e-04, 4.95729e-04, 5.54095e-04, 6.14053e-04, 6.58923e-04,
        3.44873e-03, 4.91866e-03],
    [2.63170e-04, 2.87418e-04, 3.39026e-04, 4.10213e-04, 4.64334e-04,
        4.49594e-04, 3.48648e-04, 3.40207e-04, 3.44986e-04, 3.68791e-04,
        4.06155e-04, 4.52554e-04, 5.06887e-04, 5.65207e-04, 6.11310e-04,
        3.27692e-03, 4.71303e-03],
    [2.21381e-04, 2.41130e-04, 2.95554e-04, 3.74965e-04, 4.28586e-04,
        4.00594e-04, 2.83632e-04, 2.71621e-04, 2.76098e-04, 2.96789e-04,
        3.29437e-04, 3.71742e-04, 4.23831e-04, 4.84027e-04, 5.34414e-04,
        2.93325e-03, 4.17340e-03],
    [1.75102e-04, 1.90086e-04, 2.47538e-04, 3.34895e-04, 3.87241e-04,
        3.45205e-04, 2.09415e-04, 1.92082e-04, 1.95451e-04, 2.12776e-04,
        2.40831e-04, 2.79999e-04, 3.31470e-04, 3.95016e-04, 4.50269e-04,
        2.52940e-03, 3.47989e-03],
    [1.36741e-04, 1.47864e-04, 2.07688e-04, 3.00975e-04, 3.51770e-04,
        2.98187e-04, 1.46239e-04, 1.23758e-04, 1.25683e-04, 1.40236e-04,
        1.64821e-04, 2.02150e-04, 2.54087e-04, 3.20991e-04, 3.80074e-04,
        2.16285e-03, 2.79562e-03],
    [1.12196e-04, 1.20876e-04, 1.82223e-04, 2.78842e-04, 3.28067e-04,
        2.66948e-04, 1.03618e-04, 7.69937e-05, 7.75259e-05, 9.01952e-05,
        1.12685e-04, 1.49395e-04, 2.02470e-04, 2.72107e-04, 3.33804e-04,
        1.88662e-03, 2.23514e-03],
    [1.01797e-04, 1.09450e-04, 1.71409e-04, 2.68866e-04, 3.16956e-04,
        2.52611e-04, 8.30065e-05, 5.34678e-05, 5.27795e-05, 6.45169e-05,
        8.63095e-05, 1.23551e-04, 1.78352e-04, 2.50347e-04, 3.13498e-04,
        1.72374e-03, 1.86316e-03],
    [1.00991e-04, 1.08450e-04, 1.70378e-04, 2.67308e-04, 3.14980e-04,
        2.50533e-04, 7.85783e-05, 4.75325e-05, 4.61990e-05, 5.79012e-05,
        7.99991e-05, 1.18052e-04, 1.73893e-04, 2.46852e-04, 3.10724e-04,
        1.67344e-03, 1.70074e-03],
    [1.05597e-04, 1.13355e-04, 1.75116e-04, 2.70937e-04, 3.18727e-04,
        2.55959e-04, 8.30074e-05, 5.07749e-05, 4.89274e-05, 6.10360e-05,
        8.41020e-05, 1.23530e-04, 1.80816e-04, 2.55081e-04, 3.19831e-04,
        1.69739e-03, 1.70232e-03]])